using Microsoft.EntityFrameworkCore;

namespace ReCallVocabulary.Data_Access
{
    public class DbContextManager
    {
        private readonly IServiceProvider _serviceProvider;
        public string FileWithCurrentDBName { get; private set; } = null!;

        private DictionaryContext _currentDictionaryContext;
        private StatsContext _currentStatsContext { get; set; } = null!;

        public DbContextManager(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
            SwitchDictionaryContext("autogenerated.db"); // Default dictionary database
            _currentStatsContext = new StatsContext("Stats.db");

#if WINDOWS
            FileWithCurrentDBName = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "currentDBName.txt");
            if (!File.Exists(FileWithCurrentDBName))
            {
                var myFile = File.Create(FileWithCurrentDBName);
                myFile.Close();
                File.WriteAllText(FileWithCurrentDBName,"autogenerated.db");
            }
#elif ANDROID

            FileWithCurrentDBName = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            if (!Directory.Exists(FileWithCurrentDBName))
            {
                Directory.CreateDirectory(FileWithCurrentDBName);
            }

            FileWithCurrentDBName = Path.Combine(FileWithCurrentDBName, "currentDBName.txt");

            if (!File.Exists((FileWithCurrentDBName)))
            {
                var myFile = File.Create(FileWithCurrentDBName);
                myFile.Close();
                File.WriteAllText(FileWithCurrentDBName, "autogenerated.db");
            }
#endif
        }

        public DictionaryContext CurrentDictionaryContext
        {
            get => _currentDictionaryContext;
            set
            {
                File.WriteAllText(FileWithCurrentDBName, Path.GetFileName(value.MyPath));
                _currentDictionaryContext = value;
            }
        }

        public StatsContext CurrentStatsContext
        {
            get => _currentStatsContext;
            set => _currentStatsContext = value;
        }

        public void SwitchDictionaryContext(string databaseName)
        {
            _currentDictionaryContext?.Dispose(); // Dispose old instance

            _currentDictionaryContext = new DictionaryContext(databaseName);
        }
    }
}
